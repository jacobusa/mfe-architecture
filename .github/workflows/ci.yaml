name: CI

on:
  push:
    branches-ignore:
      - '*'

jobs:
  # test affected apps
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: '**/package.json'

      ## TODO Move these into a different job
      - name: Cache pnpm store
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Test affected apps
        # Test apps or packages if current files in app or package are different from the previous commit
        run: |
          npx nx affected -t test --base=${{github.ref_name}}~1

  # build and deploy affected repos
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: '**/package.json'

      - name: Cache pnpm store
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Development Build
        if: ${{github.ref_name != github.event.repository.default_branch}}
        env:
          BUILD_ENV: dev
        run: |
          export VITE_ENV=${{env.BUILD_ENV}} && npx nx affected -t build --base=${{github.ref_name}}~1

      - name: Production Build
        if: ${{github.ref_name == github.event.repository.default_branch}}
        env:
          BUILD_ENV: prod
        run: |
          export VITE_ENV=${{env.BUILD_ENV}} && npx nx affected -t build --base=${{github.ref_name}}~1

      - name: Configure AWS Credentials
        run: |
          mkdir -p ~/.aws
          file=~/.aws/credentials
          echo "[accolite-terraform-mfe-xsquad]" > $file
          echo "aws_access_key_id = ${{secrets.AWS_ACCESS_KEY_ID}}" >> $file
          echo "aws_secret_access_key = ${{secrets.AWS_SECRET_ACCESS_KEY}}" >> $file

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Deploy affected apps to dev
        if: ${{github.ref_name != github.event.repository.default_branch}}
        env:
          DEPLOYMENT_ENV: 'dev'
        # Deploy apps or packages if current files in app or package are different from the previous commit
        run: |
          npx nx affected -t deploy --base=${{ github.ref_name }}~1

      - name: Deploy affected apps to prod
        if: ${{github.ref_name == github.event.repository.default_branch}}
        env:
          DEPLOYMENT_ENV: 'prod'
        # Deploy apps or packages if current files in app or package are different from previous version of main
        run: |
          npx nx affected -t deploy --base=${{github.event.repository.default_branch}}~1
